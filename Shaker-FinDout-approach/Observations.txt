1.	Actuator model (displacement and force feedback, Ke = 1, Kp = 0.005):
	Aact = [0 1 0 0; 0 0 1/m 0; 0 -kact -bet d; -Ke*alph 0 -Kp*alph -alph];
	Bact = [0 0; 0 1/m; 0 0; Ke*alph 0];
	Cact = [1 0 0 0; 0 1 0 0; 0 0 1 0];
	Dact = [];
	ssAct = ss(Aact, Bact, Cact, Dact);
	ssAct.InputName = {'u','w'};
	ssAct.OutputName = {'x','v','F'};

	Controller setup:
	ssController = tunableSS('Controller',3,1,2);
	ssController.InputName = {'v','F'};
	ssController.OutputName = 'u';

	controller obtained:
	From input 1 to output:
  -121.6 s^3 - 4.71e04 s^2 - 2.025e05 s - 7.416e07
  ------------------------------------------------
      s^3 + 859.9 s^2 + 1.909e05 s + 4.023e06
 
	From input 2 to output:
  -0.1032 s^3 + 5.156 s^2 - 2087 s + 2.045e04
  -------------------------------------------
    s^3 + 859.9 s^2 + 1.909e05 s + 4.023e06
	
	
2.	Actuator model (open loop - remove Ke from B and then set Ke=0, Kp = 0):
	Ke = 0; Kp = 0;
	Aact = [0 1 0 0; 0 0 1/m 0; 0 -kact -bet d; -Ke*alph 0 -Kp*alph -alph];
	Bact = [0 0; 0 1/m; 0 0; alph 0];
	Cact = [1 0 0 0; 0 1 0 0; 0 0 1 0];
	
	Controller setup: Same as above
	Controller ends up with integrator not stabilizable
	Try higher order controller - same issue with higher order controller

3.  Run with displacement instead of velocity feedback, hoping for passivity when viewed for velocity to force

4.  Can prove that w->v is positive real => v->F is positive real, so enough to impose passivity constraint on w->v

5.  w->v PR is hard to get with feedback of F and feedforward of x, even if the FB and FF are given separate control structures;
    There appears to be a "barrier" between the desired and achieved VS that cannot be broken without violating passivity;
    This has nothing to do with constraints on control effort; even when the control effort constratin is removed,
    the barrier persists. 
    The situation changes when the controller is given access to w. Is access to w needed to achieve passivity? If so, why?
    
